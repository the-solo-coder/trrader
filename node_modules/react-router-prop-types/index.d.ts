import * as PropTypes from 'prop-types';
export declare const location: PropTypes.Requireable<PropTypes.InferProps<{
    hash: PropTypes.Validator<string>;
    key: PropTypes.Requireable<string>;
    pathname: PropTypes.Validator<string>;
    search: PropTypes.Validator<string>;
    state: PropTypes.Requireable<string | number | boolean | object>;
}>>;
export declare const history: PropTypes.Requireable<PropTypes.InferProps<{
    action: PropTypes.Validator<string>;
    block: PropTypes.Validator<(...args: any[]) => any>;
    createHref: PropTypes.Validator<(...args: any[]) => any>;
    go: PropTypes.Validator<(...args: any[]) => any>;
    goBack: PropTypes.Requireable<(...args: any[]) => any>;
    goForward: PropTypes.Requireable<(...args: any[]) => any>;
    back: PropTypes.Requireable<(...args: any[]) => any>;
    forward: PropTypes.Requireable<(...args: any[]) => any>;
    index: PropTypes.Requireable<number>;
    length: PropTypes.Requireable<number>;
    listen: PropTypes.Validator<(...args: any[]) => any>;
    location: PropTypes.Validator<PropTypes.InferProps<{
        hash: PropTypes.Validator<string>;
        key: PropTypes.Requireable<string>;
        pathname: PropTypes.Validator<string>;
        search: PropTypes.Validator<string>;
        state: PropTypes.Requireable<string | number | boolean | object>;
    }>>;
    push: PropTypes.Validator<(...args: any[]) => any>;
    replace: PropTypes.Validator<(...args: any[]) => any>;
}>>;
export declare const match: PropTypes.Requireable<PropTypes.InferProps<{
    isExact: PropTypes.Requireable<boolean>;
    params: PropTypes.Validator<object>;
    path: PropTypes.Validator<string>;
    url: PropTypes.Validator<string>;
}>>;
export declare const route: PropTypes.Requireable<PropTypes.InferProps<any>>;
declare const _default: {
    location: PropTypes.Requireable<PropTypes.InferProps<{
        hash: PropTypes.Validator<string>;
        key: PropTypes.Requireable<string>;
        pathname: PropTypes.Validator<string>;
        search: PropTypes.Validator<string>;
        state: PropTypes.Requireable<string | number | boolean | object>;
    }>>;
    history: PropTypes.Requireable<PropTypes.InferProps<{
        action: PropTypes.Validator<string>;
        block: PropTypes.Validator<(...args: any[]) => any>;
        createHref: PropTypes.Validator<(...args: any[]) => any>;
        go: PropTypes.Validator<(...args: any[]) => any>;
        goBack: PropTypes.Requireable<(...args: any[]) => any>;
        goForward: PropTypes.Requireable<(...args: any[]) => any>;
        back: PropTypes.Requireable<(...args: any[]) => any>;
        forward: PropTypes.Requireable<(...args: any[]) => any>;
        index: PropTypes.Requireable<number>;
        length: PropTypes.Requireable<number>;
        listen: PropTypes.Validator<(...args: any[]) => any>;
        location: PropTypes.Validator<PropTypes.InferProps<{
            hash: PropTypes.Validator<string>;
            key: PropTypes.Requireable<string>;
            pathname: PropTypes.Validator<string>;
            search: PropTypes.Validator<string>;
            state: PropTypes.Requireable<string | number | boolean | object>;
        }>>;
        push: PropTypes.Validator<(...args: any[]) => any>;
        replace: PropTypes.Validator<(...args: any[]) => any>;
    }>>;
    match: PropTypes.Requireable<PropTypes.InferProps<{
        isExact: PropTypes.Requireable<boolean>;
        params: PropTypes.Validator<object>;
        path: PropTypes.Validator<string>;
        url: PropTypes.Validator<string>;
    }>>;
    route: PropTypes.Requireable<PropTypes.InferProps<any>>;
};
export default _default;
